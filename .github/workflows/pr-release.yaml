name: Release to @pr-<number> tag on npm
on:
  workflow_dispatch:
    inputs:
      jobToRun:
        description: 'Job to run (release, clean)'
        required: true
  pull_request:
    types:
      - closed

jobs:
  release-pr:
    name: "Release PR to npm"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.jobToRun == 'release' }}
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: CI Setup
        uses: ./.github/actions/ci-setup

      - name: Configure npm
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Ensure NPM access
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build
        run: pnpm build

      - name: Release to @pr-${{ github.event.pull_request.number }} tag on npm
        id: release
        run: |
          pnpm changeset:next
          git add .changeset/fuel-labs-ci.md
          pnpm changeset version --snapshot pr-${{ github.event.pull_request.number }}
          echo ::set-output name=version::$(pnpm changeset publish --tag pr-${{ github.event.pull_request.number }})
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set published version
        run: |
          published_version=$(echo "${{ steps.release.outputs.version }}" | grep -oP -m 1 '@fuel-ui/[^@]*@\K([0-9]+\.){2}[0-9]+-pr-${{ github.event.pull_request.number }}-\w+')
          if [ -z "$published_version" ]; then
            echo "Error: Published version not found"
            exit 1
          fi
          echo "::set-output name=published_version::$published_version"
        id: set_version

      - uses: mshick/add-pr-comment@v2
        with:
          message: |
            This PR is published in NPM with version **${{ steps.set_version.outputs.published_version }}**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  delete-published-versions:
    name: "Delete published versions on NPM"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: CI Setup
        uses: ./.github/actions/ci-setup

      - name: Configure npm
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Ensure NPM access
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Delete published versions
        run: |
          # Pass the PR number as an argument to the pr:clean-releases script
          pnpm pr:clean-releases --pr ${{ github.event.pull_request.number }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  clean-dev-releases:
    name: "Delete all dev, next and pr-* releases from NPM"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.jobToRun == 'clean' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: CI Setup
        uses: ./.github/actions/ci-setup

      - name: Configure npm
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Ensure NPM access
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Delete published versions
        run: |
          # Pass the PR number as an argument to the pr:clean-releases script
          pnpm pr:clean-releases --clean
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
