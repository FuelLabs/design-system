{"version":3,"file":"Tag-4a4d1c1f.js","sources":["../../src/components/Tag/TagCloseButton.tsx","../../src/components/Tag/variants.ts","../../src/components/Tag/styles.ts","../../src/components/Tag/Tag.tsx"],"sourcesContent":["import { cx } from '@fuel-ui/css';\n\nimport { createComponent } from '../../utils';\nimport type { IconButtonProps } from '../IconButton';\nimport { IconButton } from '../IconButton';\n\nexport type TagCloseButtonsProp = Omit<IconButtonProps, 'icon' | 'aria-label'>;\n\ntype ObjProps = {\n  id: string;\n};\n\nexport const TagCloseButton = createComponent<TagCloseButtonsProp, ObjProps>(\n  ({ className, ...props }) => {\n    const classes = cx('fuel_TagCloseBtn', className);\n    return (\n      <IconButton\n        {...props}\n        aria-label=\"close\"\n        icon=\"XCircle\"\n        variant=\"link\"\n        className={classes}\n        iconSize={14}\n      />\n    );\n  }\n);\n\nTagCloseButton.id = 'TagCloseButton';\n","import * as buttonVariants from '../Button/variants';\n\nexport const size = {\n  xs: {\n    gap: '$1',\n    px: '$2',\n    fontSize: '$xs',\n    fontWeight: '$normal',\n    height: '$5',\n    borderRadius: '$full',\n  },\n  sm: {\n    gap: '$2',\n    px: '$3',\n    fontSize: '$sm',\n    fontWeight: '$normal',\n    height: '$6',\n    borderRadius: '$full',\n  },\n  md: {\n    gap: '$2',\n    px: '$3',\n    fontSize: '$base',\n    fontWeight: '$normal',\n    height: '$8',\n    borderRadius: '$full',\n  },\n};\n\nexport const intents = buttonVariants.intents;\n","import { css } from '@fuel-ui/css';\n\nimport * as variants from './variants';\n\nexport const tag = css({\n  is: ['display'],\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  border: '1px solid transparent',\n  transition: 'all',\n  textDecoration: 'none',\n\n  '& button': {\n    px: '$0',\n    intent: 'inherit',\n    opacity: '.6',\n\n    '&:hover': {\n      opacity: 1,\n    },\n  },\n\n  variants: {\n    size: variants.size,\n\n    intent: {\n      primary: {},\n      base: {},\n      info: {},\n      warning: {},\n      success: {},\n      error: {},\n    },\n\n    variant: {\n      solid: {},\n      ghost: {},\n      outlined: {},\n      link: {},\n    },\n\n    disabled: {\n      true: {\n        opacity: '0.6',\n        cursor: 'default',\n      },\n    },\n  },\n\n  compoundVariants: [\n    /**\n     * Variants imported from button variants\n     */\n    ...variants.intents.solid,\n    ...variants.intents.ghost,\n    ...variants.intents.outlined,\n    ...variants.intents.link,\n  ],\n\n  defaultVariants: {\n    size: 'sm',\n    intent: 'primary',\n    variant: 'solid',\n  },\n});\n","import type { LayerVariant } from '@fuel-ui/css';\nimport { cx } from '@fuel-ui/css';\nimport type { ReactNode } from 'react';\nimport { Children } from 'react';\n\nimport { createComponent } from '../../utils';\nimport type { HTMLProps } from '../../utils';\nimport { Box } from '../Box';\nimport type { ButtonBaseProps } from '../Button';\nimport { SPINNER_SIZE, createIcon } from '../Button';\nimport { Spinner } from '../Spinner';\n\nimport { TagCloseButton } from './TagCloseButton';\nimport * as styles from './styles';\n\nfunction getIconSize(size: TagProps['size'], iconSize?: number) {\n  if (iconSize) return iconSize;\n  if (size === 'xs') return 14;\n  return 16;\n}\n\ntype GetChildrenParams = TagProps & {\n  iconLeft?: ReactNode;\n  iconRight?: ReactNode;\n};\nfunction getChildren({\n  isLoading,\n  size,\n  children,\n  iconLeft,\n  iconRight,\n}: GetChildrenParams) {\n  if (isLoading) {\n    return (\n      <>\n        <Spinner color=\"current\" size={SPINNER_SIZE[size || 'md']} />\n        {children}\n      </>\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const hasCloseBtn = Children.toArray(children).some((child: any) =>\n    child.type?.id?.includes('TagCloseButton')\n  );\n  return (\n    <>\n      {iconLeft}\n      {children}\n      {!hasCloseBtn && iconRight}\n    </>\n  );\n}\n\nexport type TagSizes = 'xs' | 'sm' | 'md';\n\nexport type TagProps = HTMLProps['div'] &\n  Omit<ButtonBaseProps, 'iconAriaLabel'> & {\n    size?: TagSizes;\n    variant?: LayerVariant;\n  };\n\ntype ObjProps = {\n  CloseButton: typeof TagCloseButton;\n};\n\nexport const Tag = createComponent<TagProps, ObjProps>(\n  ({\n    as = 'span',\n    size = 'sm',\n    intent = 'primary',\n    variant = 'solid',\n    iconSize: initialIconSize,\n    leftIcon,\n    rightIcon,\n    leftIconAriaLabel,\n    rightIconAriaLabel,\n    isLoading,\n    isDisabled,\n    children,\n    className,\n    ...props\n  }) => {\n    const disabled = isLoading || isDisabled;\n    const iconSize = getIconSize(size, initialIconSize);\n    const iconLeft = createIcon(leftIcon, leftIconAriaLabel, iconSize);\n    const iconRight = createIcon(rightIcon, rightIconAriaLabel, iconSize);\n\n    const classes = cx(\n      'fuel_Tag',\n      className,\n      styles.tag({\n        size,\n        variant,\n        disabled,\n        intent,\n      })\n    );\n\n    const customChildren = getChildren({\n      isLoading,\n      size,\n      iconLeft,\n      iconRight,\n      children,\n    });\n\n    return (\n      <Box as={as} {...props} className={classes}>\n        {customChildren}\n      </Box>\n    );\n  }\n);\n\nTag.CloseButton = TagCloseButton;\n"],"names":["TagCloseButton","createComponent","className","props","classes","cx","jsx","IconButton","size","intents","buttonVariants.intents","tag","css","variants.size","variants.intents","getIconSize","iconSize","getChildren","isLoading","children","iconLeft","iconRight","jsxs","Fragment","Spinner","SPINNER_SIZE","hasCloseBtn","Children","child","_b","_a","Tag","as","intent","variant","initialIconSize","leftIcon","rightIcon","leftIconAriaLabel","rightIconAriaLabel","isDisabled","disabled","createIcon","styles.tag","customChildren","Box"],"mappings":"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"}