{"version":3,"file":"Focus-9ae2ff2a.js","sources":["../../src/components/Focus/FocusArrowNavigator.tsx","../../src/components/Focus/Focus.tsx"],"sourcesContent":["import type { KeyboardEvent, ReactElement, ReactNode } from 'react';\nimport { Children, cloneElement } from 'react';\nimport { FocusScope, mergeProps, useFocusManager } from 'react-aria';\n\nimport { createComponent } from '../../utils';\n\nimport type { FocusScopeProps } from './FocusScope';\n\ntype GroupChildrenProps = {\n  children: ReactNode;\n};\n\nconst GroupChildren = createComponent<GroupChildrenProps>(({ children }) => {\n  const { onKeyDown } = useFocusNavigator();\n\n  if (isRightChildrenType(children)) {\n    return (\n      <>\n        {Children.map(children as ReactElement[], (child: ReactElement) => {\n          return cloneElement(child, mergeProps(child.props, { onKeyDown }));\n        })}\n      </>\n    );\n  }\n\n  throw new Error('Children type not accepted');\n});\n\nexport type FocusArrowNavigatorProps = FocusScopeProps & {\n  children: ReactNode;\n};\n\nexport const FocusArrowNavigator = createComponent<FocusArrowNavigatorProps>(\n  ({ children, ...props }) => (\n    <FocusScope {...props}>\n      <GroupChildren>{children}</GroupChildren>\n    </FocusScope>\n  )\n);\n\nexport function useFocusNavigator() {\n  const focusManager = useFocusManager();\n\n  const onKeyDown = (e: KeyboardEvent) => {\n    if (e.key === 'ArrowRight') {\n      focusManager.focusNext();\n    }\n    if (e.key === 'ArrowLeft') {\n      focusManager.focusPrevious();\n    }\n    if (e.key === 'ArrowUp') {\n      focusManager.focusNext();\n    }\n    if (e.key === 'ArrowDown') {\n      focusManager.focusPrevious();\n    }\n  };\n\n  return {\n    onKeyDown,\n  };\n}\n\nfunction isRightChildrenType(children: ReactNode) {\n  return (\n    typeof children !== 'boolean' &&\n    typeof children !== 'string' &&\n    typeof children !== 'undefined' &&\n    typeof children !== 'number'\n  );\n}\n","import { FocusArrowNavigator } from './FocusArrowNavigator';\nimport { FocusScope } from './FocusScope';\n\nexport type { FocusArrowNavigatorProps } from './FocusArrowNavigator';\nexport type { FocusScopeProps } from './FocusScope';\n\nexport const Focus = {\n  Scope: FocusScope,\n  ArrowNavigator: FocusArrowNavigator,\n};\n"],"names":["GroupChildren","createComponent","children","onKeyDown","useFocusNavigator","isRightChildrenType","jsx","Fragment","Children","child","cloneElement","mergeProps","FocusArrowNavigator","props","FocusScope","focusManager","useFocusManager","e","Focus"],"mappings":"sJAYA,MAAAA,EAAAC,EAAA,CAAA,CAAA,SAAAC,KAAA,CACE,KAAA,CAAA,UAAAC,GAAAC,IAEA,GAAAC,EAAAH,CAAA,EACE,OAAAI,EAAAC,EAAA,CAAA,SAAAC,EAAA,SAAA,IAAAN,EAAAO,GAGMC,EAAA,aAAAD,EAAAE,EAAAF,EAAA,MAAA,CAAA,UAAAN,CAAA,CAAA,CAAA,CAAiE,CAAA,CAAA,EAMzE,MAAA,IAAA,MAAA,4BAAA,CACF,CAAA,EAMOS,EAAAX,EAA4B,CAAA,CAAA,SAAAC,EAAA,GAAAW,CAAA,IAAAP,EAAAQ,EAAA,CAAA,GAAAD,EAAA,SAAAP,EAAAN,EAAA,CAAA,SAAAE,CAAA,CAAA,CAAA,CAAA,CAMnC,EAEO,SAAAE,GAAA,CACL,MAAAW,EAAAC,IAiBA,MAAA,CAAO,UAfPC,GAAA,CACEA,EAAA,MAAA,cACEF,EAAA,UAAA,EAEFE,EAAA,MAAA,aACEF,EAAA,cAAA,EAEFE,EAAA,MAAA,WACEF,EAAA,UAAA,EAEFE,EAAA,MAAA,aACEF,EAAA,cAAA,CACF,CAIA,CAEJ,CAEA,SAAAV,EAAAH,EAAA,CACE,OAAA,OAAAA,GAAA,WAAA,OAAAA,GAAA,UAAA,OAAAA,EAAA,KAAA,OAAAA,GAAA,QAMF;;;;2DChEO,MAAMgB,EAAQ,CACnB,MAAOJ,EACP,eAAgBF,CAClB"}